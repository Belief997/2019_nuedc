// y(t) = c(t) * (m * x(t) + 1)

module mod
(
	input clk, rst,
	input signed [9:0] c,	// ? Q1.9
	input signed [7:0] x,	// Q1.7
	input [7:0] m,			// ? Q0.8
	output reg signed [10:0] sig // Q2.9
);
	reg signed [7:0] mx;	// Q1.7, (-1,1)
	initial begin
		mx = 8'sd0;
		sig = 11'sd0;
	end
	wire signed [8:0] sm = m;	// Q1.8
	//               1.7   1.8  1.7
	//wire signed [7:0] mx = (17'sd1 * sm * x) >>> 8;
	always@(posedge clk) begin
		if(~rst)
			mx <= (17'sd1 * sm * x) >>> 8;
		else
			mx <= 8'sd0;
	end
	//            Q2.7(0,2)   Q1.7(-1,1)  Q2.7(1)
	wire signed [8:0] mx_shift = mx + (9'sd1 <<< 7);
	always@(posedge clk) begin
	// Q2.9(-2,2)      Q2.7(0,2)   Q1.9(-1,1)
		sig <= (19'sd1 * mx_shift   *   c) >>> 7;
	end
endmodule
/////////////////////////////////////////////////////////////////
module carr(
	input clk,
	output reg signed [9:0] c
);
	initial c = 10'sd0;
	reg [10:0] acc; initial acc = 11'd0;
	always@(posedge clk) begin
		if(acc < 11'd1980)
			acc <= acc + 11'd20;
		else
			acc <= 11'd0;
	end
	always@(posedge clk) begin
		if(acc < 11'd1000)
			c <= acc - 11'd500;
		else
			c <= 11'd1500 - acc;
	end
endmodule
///////////////////////////////////////////////////////////////////
module siggen(
	input clk,
	output reg signed [7:0] x
);
	initial x = 8'sd0;
    //        Q2.22(-2,2)
	reg signed [23:0] pacc; initial pacc = 24'sd0;
	always@(posedge clk) begin
		if(pacc < 24'sh7F_8000)		/*2500 clk time*/
			pacc <= pacc + 24'sd6698;//two numbers ??
		else
			pacc <= -24'sh7F_8000;          //
	end
	//             Q1.7(-1,1) Q2.22(-2,2)  Q2.22(1.0)
	wire signed [7:0] yrise = (pacc + (24'sd1 <<< 22)) >>> 15;
//                 Q1.7(-1,1) Q2.22(1.0)  Q2.22(-2,2)
	wire signed [7:0] yfall = ((24'sd1 <<< 22) - pacc) >>> 15;
	always@(posedge clk) begin
		if(pacc < 24'sd0)
			x <= yrise;
		else
			x <= yfall;
	end
endmodule
