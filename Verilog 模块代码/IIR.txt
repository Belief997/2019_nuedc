 //IIR_2nd
 //input & output data width are 32  
 //shift pow is 16
 //  signed data
 module IIR_2nd#(
	parameter W = 32,
	parameter FSW = 16,
	parameter real B0 = 1,
	parameter real B1 = 1,
	parameter real B2 = 1,
	parameter real A1 = 1,
	parameter real A2 = 1
)(
	input clk,en,
	input  signed [W-1:0] in,
	output  signed  [W-1:0] out
);

	wire signed [W-1:0] b0 = (B0 * (2.0 ** FSW));
	wire signed [W-1:0] b1 = (B1 * (2.0 ** FSW));
	wire signed [W-1:0] b2 = (B2 * (2.0 ** FSW));
	wire signed [W-1:0] a1 = (A1 * (2.0 ** FSW));
	wire signed [W-1:0] a2 = (A2 * (2.0 ** FSW));
	wire signed [3*W-1:0] bx0L = b0 * in;
	wire signed [3*W-1:0] bx1L = b1 * in;
	wire signed [3*W-1:0] bx2L = b2 * in;
	wire signed [3*W-1:0] ay1L = a1 * out;
	wire signed [3*W-1:0] ay2L = a2 * out;
	wire signed [W-1:0] bx0 = bx0L >>> FSW;
	wire signed [W-1:0] bx1 = bx1L >>> FSW;
	wire signed [W-1:0] bx2 = bx2L >>> FSW;
	wire signed [W-1:0] ay1 = ay1L >>> FSW;
	wire signed [W-1:0] ay2 = ay2L >>> FSW;

	reg signed [W-1:0] d[0:1];
initial begin
	d[0] = 'sb0;
	d[1] = 'sb0;
end

assign out = bx0 + d[0];

always@(posedge clk) begin
	if(en)begin
		d[0] <= bx1 - ay1 + d[1];
		d[1] <= bx2 - ay2;
	end
end
endmodule 


/////////////////////////////////////////////////////////////////////
//综合整合整个iir链，级联
//用一个 reg 接上层输入， 每个小块用 wire 接输出，再用一个 reg 缓冲输入下一个小块
// 使能先为低， 后一段时间后上拉且一直保持为高
//每个小块的参数设置 Bx 需要乘增益 
//采样率设为陷波频率的4-10倍
//滤波器工作时钟即为采样率，在上层用计数器使能产生

module my_iir(
	input clk,
	input signed [31:0] in,
	output signed [31:0] out

);
	wire signed [31:0] y1x2, y2x3, y3x4,y4x5;
	reg signed [31:0] sec12, sec23, sec34, sec45, sec56;
	reg signed [31:0] the_in;
	
	reg [3:0] cnten;
initial begin cnten = 4'b1; the_in = 'b0; sec12 ='b0;sec23 ='b0;sec34 ='b0;sec45 ='b0;sec56 ='b0; end
always @(posedge clk) begin
	if((cnten!=4'd10))
		cnten <= cnten + 1'b1;
	else if (cnten == 4'd10) begin
		cnten <= 4'd10;
	end 
end

always @(posedge clk) begin
    the_in <= in;
    sec12 <= y1x2;
    sec23 <= y2x3;
    sec34 <= y3x4;
    sec45 <= y4x5;
//    sec56 <= y5x6;
end

wire en=(cnten == 4'd10);

//////Fs 1K Order 10 Sec5 Elliptic
IIR_2nd#(
	.W(32),
	.FSW(16),
	.B0(1*0.60600827214482633),
	.B1(-1.900087744679229        *0.60600827214482633),
	.B2(1*0.60600827214482633),
	.A1(-1.8891574814809755       ),
	.A2( 0.99655809877856705      )
) sec1 (
	.clk(clk),.en(en),
	.in(the_in),
	.out(y1x2)
);
IIR_2nd#(
	.W(32),
	.FSW(16),
	.B0(1*0.60600827214482633       ),
	.B1(-1.9045578275663106       *0.60600827214482633       ),
	.B2(1*0.60600827214482633       ),
	.A1(-1.9083918557764812       ),
	.A2( 0.99686817128507554      )
) sec2 (
	.clk(clk),.en(en),
	.in(sec12),
	.out(y2x3)
);
IIR_2nd#(
	.W(32),
	.FSW(16),
	.B0(1*0.99044238331821444       ),
	.B1(-1.9009451204244441       *0.99044238331821444       ),
	.B2(1*0.99044238331821444       ),
	.A1(-1.870140143253431        ),
	.A2( 0.98012895245820342      )
) sec3 (
	.clk(clk),.en(en),
	.in(sec23),
	.out(y3x4)
);
IIR_2nd#(
	.W(32),
	.FSW(16),
	.B0(1*0.99044238331821444       ),
	.B1(-1.9037309501415742       *0.99044238331821444       ),
	.B2(1*0.99044238331821444       ),
	.A1(-1.8974097046890916       ),
	.A2( 0.98245934724818818      )    
) sec4(
	.clk(clk),.en(en),
	.in(sec34),
	.out(y4x5)
);
IIR_2nd#(
	.W(32),
	.FSW(16),
	.B0(1*2.6024903490653259        ),
	.B1(-1.9023477205076051       *2.6024903490653259        ),
	.B2(1*2.6024903490653259        ),
	.A1(-1.8245736860102928       ),
	.A2( 0.91823362925831475      )    
) sec5(
	.clk(clk),.en(en),
	.in(sec45),
	.out(out)
);

endmodule 

/////////////////////////////////////////////////////////////////////
//进入IIR前的有符号转换，和移位，出IIR后再移位恢复

//temp reg delay transform
always@(posedge clk)begin
    if(en)begin 
    aDATA <= aDATA_0;// + 16'sd4096;
    the_in <= ((32'sb1 * aDATA)<<<6);//<<<6  >>>6  12bit
    iir_out <= iir_out_0;
    dDATA <= (iir_out>>>6 );
    end
end


 my_iir the_iir(
   .clk(co),
   .in(the_in),
   .out(iir_out_0)

);